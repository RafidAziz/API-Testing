{
	"info": {
		"_postman_id": "d0471b6b-fad2-4737-941f-293ab2fed408",
		"name": "API Testing - Postman Echo API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34303852"
	},
	"item": [
		{
			"name": "Test GET response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test GET with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body",
							"let responseJson = pm.response.json();",
							"",
							"// Check if the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the response body has the correct structure",
							"pm.test(\"Response has args object\", function () {",
							"    pm.expect(responseJson).to.have.property('args');",
							"});",
							"",
							"// Validate the response body contains the correct query parameters",
							"pm.test(\"Response contains correct query parameters\", function() {",
							"    pm.expect(responseJson.args).to.have.property('key1', 'value1');",
							"    pm.expect(responseJson.args).to.have.property('key2', 'value2');",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get?key1=value1&key2=value2",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "key1",
							"value": "value1"
						},
						{
							"key": "key2",
							"value": "value2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test POST response with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract query parameters from the request",
							"let queryParams = pm.request.url.query.toObject();",
							"console.log('Query Parameters:', queryParams);",
							"",
							"// Validate that each query parameter is present in the response",
							"pm.test('Response contains all query parameters', function () {",
							"    Object.keys(queryParams).forEach(function (key) {",
							"        pm.expect(pm.response.text()).to.include(queryParams[key]);",
							"    });",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/post?user1=rafid1&user2=rafid2&user3=rafid3",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					],
					"query": [
						{
							"key": "user1",
							"value": "rafid1"
						},
						{
							"key": "user2",
							"value": "rafid2"
						},
						{
							"key": "user3",
							"value": "rafid3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test PUT response with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract query parameters from the request",
							"let queryParams = pm.request.url.query.toObject();",
							"console.log('Query Parameters:', queryParams);",
							"",
							"// Validate that each query parameter is present in the response",
							"pm.test('Response contains all query parameters', function () {",
							"    Object.keys(queryParams).forEach(function (key) {",
							"        pm.expect(pm.response.text()).to.include(queryParams[key]);",
							"    });",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/put?test=put request",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"put"
					],
					"query": [
						{
							"key": "test",
							"value": "put request"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test PATCH response with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract query parameters from the request",
							"let queryParams = pm.request.url.query.toObject();",
							"console.log('Query Parameters:', queryParams);",
							"",
							"// Validate that each query parameter is present in the response",
							"pm.test('Response contains all query parameters', function () {",
							"    Object.keys(queryParams).forEach(function (key) {",
							"        pm.expect(pm.response.text()).to.include(queryParams[key]);",
							"    });",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/patch?test=patch request",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"patch"
					],
					"query": [
						{
							"key": "test",
							"value": "patch request"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test DELETE response with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract query parameters from the request",
							"let queryParams = pm.request.url.query.toObject();",
							"console.log('Query Parameters:', queryParams);",
							"",
							"// Validate that each query parameter is present in the response",
							"pm.test('Response contains all query parameters', function () {",
							"    Object.keys(queryParams).forEach(function (key) {",
							"        pm.expect(pm.response.text()).to.include(queryParams[key]);",
							"    });",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/delete?test=delete",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"delete"
					],
					"query": [
						{
							"key": "test",
							"value": "delete"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Valid Basic Authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body",
							"const jsonData = pm.response.json();",
							"",
							"// Log the entire response to inspect its structure",
							"console.log(jsonData);",
							"",
							"// Check if the response status is 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the 'authenticated' property is true",
							"pm.test(\"User is authenticated\", function () {",
							"    pm.expect(jsonData.authenticated).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						},
						{
							"key": "password",
							"value": "password",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Invalid Basic Authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status is 401 Unauthorized",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"// Check if the response body contains the correct error message",
							"pm.test(\"Error message is correct. User is not authenticated\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include('Unauthorized');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "invalid_password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "invalid_user",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Valid Digest Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body",
							"const jsonData = pm.response.json();",
							"",
							"// Check if the response status is 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the 'authenticated' property is true",
							"pm.test(\"User is authenticated\", function () {",
							"    pm.expect(jsonData.authenticated).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "digest",
					"digest": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "MD5",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/digest-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"digest-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Invalid Digest Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status is 401 Unauthorized",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"// Check if the response body contains the correct error message",
							"pm.test(\"Error message is correct. User is not authenticated\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include('Unauthorized');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "digest",
					"digest": [
						{
							"key": "password",
							"value": "invalid_password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "invalid_user",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "MD5",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/digest-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"digest-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Valid Hawk Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"User is authenticated. Response body contains 'Hawk Authentication Successful' message\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.deep.include({ message: \"Hawk Authentication Successful\" });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "hawk",
					"hawk": [
						{
							"key": "authKey",
							"value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
							"type": "string"
						},
						{
							"key": "authId",
							"value": "dh37fgj492je",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "sha256",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/auth/hawk",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"auth",
						"hawk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Invalid Hawk Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message is correct: 'Unauthorized'\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.eql(\"Unauthorized\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "hawk",
					"hawk": [
						{
							"key": "authKey",
							"value": "invalid-key",
							"type": "string"
						},
						{
							"key": "authId",
							"value": "invalid-id",
							"type": "string"
						},
						{
							"key": "algorithm",
							"value": "sha256",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/auth/hawk",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"auth",
						"hawk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Valid Oauth1.0a Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the response status code is 200 for a valid request",
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check that the response contains status pass",
							"pm.test(\"Response body contains status pass\", function () {",
							"        pm.response.to.have.jsonBody('status', 'pass');",
							"});",
							"",
							"// Check that the response contains status pass",
							"pm.test(\"Response body contains message OAuth-1.0a signature verification was successful\", function () {",
							"        pm.response.to.have.jsonBody('message', 'OAuth-1.0a signature verification was successful');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "tokenSecret",
							"value": "",
							"type": "string"
						},
						{
							"key": "token",
							"value": "",
							"type": "string"
						},
						{
							"key": "consumerSecret",
							"value": "D+EdQ-gs$-%@2Nu7",
							"type": "string"
						},
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "RKCGzna7bv9YD57c",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/oauth1",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"oauth1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Invalid Oauth1.0a Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check that the response status code is 200 for a valid request",
							"pm.test(\"Response status is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"// Check that the response contains status fail",
							"pm.test(\"Response body contains status pass\", function () {",
							"        pm.response.to.have.jsonBody('status', 'fail');",
							"});",
							"",
							"// Check that the response contains status pass",
							"pm.test(\"Response body contains message HMAC-SHA1 verification failed\", function () {",
							"        pm.response.to.have.jsonBody('message', 'HMAC-SHA1 verification failed');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth1",
					"oauth1": [
						{
							"key": "consumerSecret",
							"value": "INVALID_CONSUMER_SECRET",
							"type": "string"
						},
						{
							"key": "tokenSecret",
							"value": "",
							"type": "string"
						},
						{
							"key": "token",
							"value": "",
							"type": "string"
						},
						{
							"key": "addParamsToHeader",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "signatureMethod",
							"value": "HMAC-SHA1",
							"type": "string"
						},
						{
							"key": "consumerKey",
							"value": "RKCGzna7bv9YD57c",
							"type": "string"
						},
						{
							"key": "version",
							"value": "1.0",
							"type": "string"
						},
						{
							"key": "addEmptyParamsToSign",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/oauth1",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"oauth1"
					]
				}
			},
			"response": []
		}
	]
}