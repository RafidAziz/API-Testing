{
	"info": {
		"_postman_id": "d0471b6b-fad2-4737-941f-293ab2fed408",
		"name": "API Testing - Postman Echo API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34303852"
	},
	"item": [
		{
			"name": "Test GET response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test GET with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response body",
							"let responseJson = pm.response.json();",
							"",
							"// Check if the response status code is 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the response body has the correct structure",
							"pm.test(\"Response has args object\", function () {",
							"    pm.expect(responseJson).to.have.property('args');",
							"});",
							"",
							"// Validate the response body contains the correct query parameters",
							"pm.test(\"Response contains correct query parameters\", function() {",
							"    pm.expect(responseJson.args).to.have.property('key1', 'value1');",
							"    pm.expect(responseJson.args).to.have.property('key2', 'value2');",
							"});",
							"",
							"// Validate date header exists",
							"pm.test(\"Header date exists\", function(){",
							"    pm.response.to.have.header(\"Date\");",
							"});",
							"",
							"// Response time check",
							"pm.test(\"Response time is less than 500ms\",function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/get?key1=value1&key2=value2",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "key1",
							"value": "value1"
						},
						{
							"key": "key2",
							"value": "value2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test POST response with parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Extract query parameters from the request",
							"let queryParams = pm.request.url.query.toObject();",
							"console.log('Query Parameters:', queryParams);",
							"",
							"// Validate that each query parameter is present in the response",
							"pm.test('Response contains all query parameters', function () {",
							"    Object.keys(queryParams).forEach(function (key) {",
							"        pm.expect(pm.response.text()).to.include(queryParams[key]);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/post?user1=rafid1&user2=rafid2&user3=rafid3",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					],
					"query": [
						{
							"key": "user1",
							"value": "rafid1"
						},
						{
							"key": "user2",
							"value": "rafid2"
						},
						{
							"key": "user3",
							"value": "rafid3"
						}
					]
				}
			},
			"response": []
		}
	]
}